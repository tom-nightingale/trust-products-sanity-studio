"use strict";
var __makeTemplateObject = (this && this.__makeTemplateObject) || function (cooked, raw) {
    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
    return cooked;
};
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.viewSet = exports.updateRequest = exports.updateError = exports.updateComplete = exports.tagsRemoveRequest = exports.tagsRemoveError = exports.tagsRemoveComplete = exports.tagsAddRequest = exports.tagsAddError = exports.tagsAddComplete = exports.sort = exports.pickRange = exports.pickClear = exports.pickAll = exports.pick = exports.orderSet = exports.loadPageIndex = exports.loadNextPage = exports.listenerUpdateQueue = exports.listenerUpdateComplete = exports.listenerDeleteQueue = exports.listenerDeleteComplete = exports.fetchRequest = exports.fetchError = exports.fetchComplete = exports.deleteRequest = exports.deletePicked = exports.deleteError = exports.deleteComplete = exports.clear = exports.selectAssetsPickedLength = exports.selectAssetsPicked = exports.selectAssetsLength = exports.selectAssets = exports.selectAssetById = exports.assetsUpdateEpic = exports.assetsUnpickEpic = exports.assetsTagsRemoveEpic = exports.assetsTagsAddEpic = exports.assetsSortEpic = exports.assetsListenerUpdateQueueEpic = exports.assetsListenerDeleteQueueEpic = exports.assetsSearchEpic = exports.assetsOrderSetEpic = exports.assetsRemoveTagsEpic = exports.assetsFetchNextPageEpic = exports.assetsFetchPageIndexEpic = exports.assetsFetchEpic = exports.assetsDeletePickedEpic = exports.assetsDeleteEpic = void 0;
var toolkit_1 = require("@reduxjs/toolkit");
var groq_1 = __importDefault(require("groq"));
var nanoid_1 = require("nanoid");
var client_1 = __importDefault(require("part:@sanity/base/client"));
var redux_observable_1 = require("redux-observable");
var rxjs_1 = require("rxjs");
var operators_1 = require("rxjs/operators");
var constants_1 = require("../../constants");
var constructFilter_1 = __importDefault(require("../../utils/constructFilter"));
var debugThrottle_1 = __importDefault(require("../../operators/debugThrottle"));
var searchSlice_1 = require("../search/searchSlice");
var defaultOrder = constants_1.ORDER_OPTIONS[0];
/**
 * NOTE:
 * `fetchCount` returns the number of items retrieved in the most recent fetch.
 * This is a temporary workaround to be able to determine when there are no more items to retrieve.
 * Typically this would be done by deriving the total number of assets upfront, but currently such
 * queries in GROQ aren't fast enough to use on large datasets (1000s of entries).
 *
 * TODO:
 * When the query engine has been improved and above queries are faster, remove all instances of
 * of `fetchCount` and reinstate `totalCount` across the board.
 */
var initialState = {
    allIds: [],
    byIds: {},
    fetchCount: -1,
    fetching: false,
    fetchingError: null,
    lastPicked: undefined,
    order: {
        direction: defaultOrder.direction,
        field: defaultOrder.field,
        title: constants_1.ORDER_DICTIONARY[defaultOrder.field][defaultOrder.direction]
    },
    pageIndex: 0,
    pageSize: 50,
    view: 'grid'
    // totalCount: -1
};
var assetsSlice = toolkit_1.createSlice({
    name: 'assets',
    initialState: initialState,
    reducers: {
        // Clear asset order
        clear: function (state) {
            state.allIds = [];
        },
        deleteComplete: function (state, action) {
            var _a;
            var assetId = (_a = action.payload) === null || _a === void 0 ? void 0 : _a.assetId;
            var deleteIndex = state.allIds.indexOf(assetId);
            if (deleteIndex >= 0) {
                state.allIds.splice(deleteIndex, 1);
            }
            delete state.byIds[assetId];
        },
        deleteError: function (state, action) {
            var _a = action.payload, asset = _a.asset, error = _a.error;
            var assetId = asset === null || asset === void 0 ? void 0 : asset._id;
            state.byIds[assetId].error = error;
            state.byIds[assetId].updating = false;
        },
        deletePicked: function () {
            //
        },
        deleteRequest: function (state, action) {
            var _a, _b;
            var assetId = (_b = (_a = action.payload) === null || _a === void 0 ? void 0 : _a.asset) === null || _b === void 0 ? void 0 : _b._id;
            state.byIds[assetId].picked = false;
            state.byIds[assetId].updating = true;
            Object.keys(state.byIds).forEach(function (key) {
                delete state.byIds[key].error;
            });
        },
        fetchComplete: function (state, action) {
            var _a;
            var assets = ((_a = action.payload) === null || _a === void 0 ? void 0 : _a.assets) || [];
            if (assets) {
                assets.forEach(function (asset) {
                    state.allIds.push(asset._id);
                    state.byIds[asset._id] = {
                        asset: asset,
                        picked: false,
                        updating: false
                    };
                });
            }
            state.fetching = false;
            state.fetchCount = assets.length || 0;
            state.fetchingError = null;
        },
        fetchError: function (state, action) {
            state.fetching = false;
            state.fetchingError = true;
        },
        fetchRequest: {
            reducer: function (state, action) {
                state.fetching = true;
                state.fetchingError = null;
            },
            prepare: function (_a) {
                var filter = _a.filter, _b = _a.params, params = _b === void 0 ? {} : _b, _c = _a.selector, selector = _c === void 0 ? "" : _c, _d = _a.sort, sort = _d === void 0 ? groq_1.default(templateObject_1 || (templateObject_1 = __makeTemplateObject(["order(_updatedAt desc)"], ["order(_updatedAt desc)"]))) : _d;
                var pipe = sort || selector ? '|' : '';
                // Construct query
                var query = groq_1.default(templateObject_2 || (templateObject_2 = __makeTemplateObject(["\n          {\n            \"items\": *[", "] {\n              _id,\n              _type,\n              _updatedAt,\n              altText,\n              description,\n              extension,\n              metadata {\n                dimensions,\n                exif,\n                isOpaque,\n              },\n              mimeType,\n              opt {\n                media\n              },\n              originalFilename,\n              size,\n              title,\n              url\n            } ", " ", " ", ",\n          }\n        "], ["\n          {\n            \"items\": *[", "] {\n              _id,\n              _type,\n              _updatedAt,\n              altText,\n              description,\n              extension,\n              metadata {\n                dimensions,\n                exif,\n                isOpaque,\n              },\n              mimeType,\n              opt {\n                media\n              },\n              originalFilename,\n              size,\n              title,\n              url\n            } ", " ", " ", ",\n          }\n        "])), filter, pipe, sort, selector);
                return { payload: { params: params, query: query } };
            }
        },
        listenerDeleteComplete: function (state, action) {
            var _a;
            var assetIds = (_a = action.payload) === null || _a === void 0 ? void 0 : _a.assetIds;
            assetIds === null || assetIds === void 0 ? void 0 : assetIds.forEach(function (assetId) {
                var deleteIndex = state.allIds.indexOf(assetId);
                if (deleteIndex >= 0) {
                    state.allIds.splice(deleteIndex, 1);
                }
                delete state.byIds[assetId];
            });
        },
        listenerDeleteQueue: function (state, action) {
            //
        },
        listenerUpdateComplete: function (state, action) {
            var _a;
            var assets = (_a = action.payload) === null || _a === void 0 ? void 0 : _a.assets;
            assets === null || assets === void 0 ? void 0 : assets.forEach(function (asset) {
                var _a;
                if ((_a = state.byIds[asset === null || asset === void 0 ? void 0 : asset._id]) === null || _a === void 0 ? void 0 : _a.asset) {
                    state.byIds[asset._id].asset = asset;
                }
            });
        },
        listenerUpdateQueue: function (state, action) {
            //
        },
        loadNextPage: function (state) {
            state.pageIndex += 1;
        },
        loadPageIndex: function (state, action) {
            //
        },
        orderSet: function (state, action) {
            var _a;
            state.order = (_a = action.payload) === null || _a === void 0 ? void 0 : _a.order;
            state.pageIndex = 0;
        },
        pick: function (state, action) {
            var _a = action.payload, assetId = _a.assetId, picked = _a.picked;
            state.byIds[assetId].picked = picked;
            state.lastPicked = picked ? assetId : undefined;
        },
        pickAll: function (state) {
            state.allIds.forEach(function (id) {
                state.byIds[id].picked = true;
            });
        },
        pickClear: function (state) {
            state.lastPicked = undefined;
            Object.values(state.byIds).forEach(function (asset) {
                state.byIds[asset.asset._id].picked = false;
            });
        },
        pickRange: function (state, action) {
            var startIndex = state.allIds.findIndex(function (id) { return id === action.payload.startId; });
            var endIndex = state.allIds.findIndex(function (id) { return id === action.payload.endId; });
            // Sort numerically, ascending order
            var indices = [startIndex, endIndex].sort(function (a, b) { return a - b; });
            state.allIds.slice(indices[0], indices[1] + 1).forEach(function (key) {
                state.byIds[key].picked = true;
            });
            state.lastPicked = state.allIds[endIndex];
        },
        sort: function (state) {
            state.allIds.sort(function (a, b) {
                var tagA = state.byIds[a].asset[state.order.field];
                var tagB = state.byIds[b].asset[state.order.field];
                if (tagA < tagB) {
                    return state.order.direction === 'asc' ? -1 : 1;
                }
                else if (tagA > tagB) {
                    return state.order.direction === 'asc' ? 1 : -1;
                }
                else {
                    return 0;
                }
            });
        },
        tagsAddComplete: function (state, action) {
            var assets = action.payload.assets;
            assets.forEach(function (asset) {
                state.byIds[asset.asset._id].updating = false;
            });
        },
        tagsAddError: function (state, action) {
            var assets = action.payload.assets;
            assets.forEach(function (asset) {
                state.byIds[asset.asset._id].updating = false;
            });
        },
        tagsAddRequest: function (state, action) {
            var assets = action.payload.assets;
            assets.forEach(function (asset) {
                state.byIds[asset.asset._id].updating = true;
            });
        },
        tagsRemoveComplete: function (state, action) {
            var assets = action.payload.assets;
            assets.forEach(function (asset) {
                state.byIds[asset.asset._id].updating = false;
            });
        },
        tagsRemoveError: function (state, action) {
            var assets = action.payload.assets;
            assets.forEach(function (asset) {
                state.byIds[asset.asset._id].updating = false;
            });
        },
        tagsRemoveRequest: function (state, action) {
            var assets = action.payload.assets;
            assets.forEach(function (asset) {
                state.byIds[asset.asset._id].updating = true;
            });
        },
        updateComplete: function (state, action) {
            var _a;
            var assetId = (_a = action.payload) === null || _a === void 0 ? void 0 : _a.assetId;
            state.byIds[assetId].updating = false;
        },
        updateError: function (state, action) {
            var _a = action.payload, asset = _a.asset, error = _a.error;
            var assetId = asset === null || asset === void 0 ? void 0 : asset._id;
            state.byIds[assetId].error = error;
            state.byIds[assetId].updating = false;
        },
        updateRequest: function (state, action) {
            var _a, _b;
            var assetId = (_b = (_a = action.payload) === null || _a === void 0 ? void 0 : _a.asset) === null || _b === void 0 ? void 0 : _b._id;
            state.byIds[assetId].updating = true;
        },
        viewSet: function (state, action) {
            var _a;
            state.view = (_a = action.payload) === null || _a === void 0 ? void 0 : _a.view;
        }
    }
});
var assetsDeleteEpic = function (action$, state$) {
    return action$.pipe(operators_1.filter(assetsSlice.actions.deleteRequest.match), operators_1.withLatestFrom(state$), operators_1.mergeMap(function (_a) {
        var action = _a[0], state = _a[1];
        var asset = action.payload.asset;
        return rxjs_1.of(action).pipe(debugThrottle_1.default(state.debug.badConnection), operators_1.mergeMap(function () { return rxjs_1.from(client_1.default.delete(asset._id)); }), operators_1.mergeMap(function () { return rxjs_1.of(assetsSlice.actions.deleteComplete({ assetId: asset._id })); }), operators_1.catchError(function (error) {
            return rxjs_1.of(assetsSlice.actions.deleteError({
                asset: asset,
                error: {
                    message: (error === null || error === void 0 ? void 0 : error.message) || 'Internal error',
                    statusCode: (error === null || error === void 0 ? void 0 : error.statusCode) || 500
                }
            }));
        }));
    }));
};
exports.assetsDeleteEpic = assetsDeleteEpic;
var assetsDeletePickedEpic = function (action$, state$) {
    return action$.pipe(operators_1.filter(assetsSlice.actions.deletePicked.match), operators_1.withLatestFrom(state$), operators_1.mergeMap(function (_a) {
        var _ = _a[0], state = _a[1];
        var availableItems = Object.entries(state.assets.byIds).filter(function (_a) {
            var value = _a[1];
            return value.picked && !value.updating;
        });
        if (availableItems.length === 0) {
            return rxjs_1.empty();
        }
        var assets = availableItems.map(function (item) { return item[1].asset; });
        return rxjs_1.of(assets);
    }), operators_1.mergeAll(), operators_1.mergeMap(function (asset) { return rxjs_1.of(assetsSlice.actions.deleteRequest({ asset: asset })); }));
};
exports.assetsDeletePickedEpic = assetsDeletePickedEpic;
var assetsFetchEpic = function (action$, state$) {
    return action$.pipe(operators_1.filter(assetsSlice.actions.fetchRequest.match), operators_1.withLatestFrom(state$), operators_1.switchMap(function (_a) {
        var _b, _c;
        var action = _a[0], state = _a[1];
        var params = (_b = action.payload) === null || _b === void 0 ? void 0 : _b.params;
        var query = (_c = action.payload) === null || _c === void 0 ? void 0 : _c.query;
        return rxjs_1.of(action).pipe(debugThrottle_1.default(state.debug.badConnection), operators_1.mergeMap(function () { return rxjs_1.from(client_1.default.fetch(query, params)); }), operators_1.mergeMap(function (result) {
            var items = result.items
            // totalCount
            ;
            return rxjs_1.of(assetsSlice.actions.fetchComplete({ assets: items }));
        }), operators_1.catchError(function (error) {
            return rxjs_1.of(assetsSlice.actions.fetchError({
                message: (error === null || error === void 0 ? void 0 : error.message) || 'Internal error',
                statusCode: (error === null || error === void 0 ? void 0 : error.statusCode) || 500
            }));
        }));
    }));
};
exports.assetsFetchEpic = assetsFetchEpic;
var assetsFetchPageIndexEpic = function (action$, state$) {
    return action$.pipe(operators_1.filter(assetsSlice.actions.loadPageIndex.match), operators_1.withLatestFrom(state$), operators_1.switchMap(function (_a) {
        var _b, _c, _d, _e, _f;
        var action = _a[0], state = _a[1];
        var pageSize = state.assets.pageSize;
        var start = action.payload.pageIndex * pageSize;
        var end = start + pageSize;
        var documentId = (_b = state === null || state === void 0 ? void 0 : state.document) === null || _b === void 0 ? void 0 : _b._id;
        return rxjs_1.of(assetsSlice.actions.fetchRequest(__assign(__assign({ filter: constructFilter_1.default({
                hasDocument: !!state.document,
                searchFacets: state.search.facets,
                searchQuery: state.search.query
            }) }, (documentId ? { params: { documentId: documentId } } : {})), { selector: groq_1.default(templateObject_3 || (templateObject_3 = __makeTemplateObject(["[", "...", "]"], ["[", "...", "]"])), start, end), sort: groq_1.default(templateObject_4 || (templateObject_4 = __makeTemplateObject(["order(", " ", ")"], ["order(", " ", ")"])), (_d = (_c = state.assets) === null || _c === void 0 ? void 0 : _c.order) === null || _d === void 0 ? void 0 : _d.field, (_f = (_e = state.assets) === null || _e === void 0 ? void 0 : _e.order) === null || _f === void 0 ? void 0 : _f.direction) })));
    }));
};
exports.assetsFetchPageIndexEpic = assetsFetchPageIndexEpic;
var assetsFetchNextPageEpic = function (action$, state$) {
    return action$.pipe(operators_1.filter(assetsSlice.actions.loadNextPage.match), operators_1.withLatestFrom(state$), operators_1.switchMap(function (_a) {
        var _ = _a[0], state = _a[1];
        return rxjs_1.of(assetsSlice.actions.loadPageIndex({ pageIndex: state.assets.pageIndex }));
    }));
};
exports.assetsFetchNextPageEpic = assetsFetchNextPageEpic;
var assetsRemoveTagsEpic = function (action$, state$) {
    return action$.pipe(operators_1.filter(assetsSlice.actions.tagsAddRequest.match), operators_1.withLatestFrom(state$), operators_1.mergeMap(function (_a) {
        var action = _a[0], state = _a[1];
        var _b = action.payload, assets = _b.assets, tag = _b.tag;
        return rxjs_1.of(action).pipe(
        // Optionally throttle
        debugThrottle_1.default(state.debug.badConnection), 
        // Add tag references to all picked assets
        operators_1.mergeMap(function () {
            var pickedAssets = exports.selectAssetsPicked(state);
            // Filter out picked assets which already include tag
            var pickedAssetsFiltered = pickedAssets === null || pickedAssets === void 0 ? void 0 : pickedAssets.filter(function (assetItem) {
                var _a, _b, _c, _d, _e;
                var tagIndex = (_e = (_d = (_c = (_b = (_a = assetItem === null || assetItem === void 0 ? void 0 : assetItem.asset) === null || _a === void 0 ? void 0 : _a.opt) === null || _b === void 0 ? void 0 : _b.media) === null || _c === void 0 ? void 0 : _c.tags) === null || _d === void 0 ? void 0 : _d.findIndex(function (t) { return t._ref === (tag === null || tag === void 0 ? void 0 : tag._id); })) !== null && _e !== void 0 ? _e : -1;
                return tagIndex < 0;
            });
            var transaction = pickedAssetsFiltered.reduce(function (transaction, pickedAsset) {
                var _a;
                return transaction.patch((_a = pickedAsset === null || pickedAsset === void 0 ? void 0 : pickedAsset.asset) === null || _a === void 0 ? void 0 : _a._id, function (patch) {
                    return patch
                        .setIfMissing({ opt: {} })
                        .setIfMissing({ 'opt.media': {} })
                        .setIfMissing({ 'opt.media.tags': [] })
                        .append('opt.media.tags', [
                        { _key: nanoid_1.nanoid(), _ref: tag === null || tag === void 0 ? void 0 : tag._id, _type: 'reference', _weak: true }
                    ]);
                });
            }, client_1.default.transaction());
            return rxjs_1.from(transaction.commit());
        }), 
        // Dispatch complete action
        operators_1.mergeMap(function () { return rxjs_1.of(assetsSlice.actions.tagsAddComplete({ assets: assets, tag: tag })); }), operators_1.catchError(function (error) {
            return rxjs_1.of(assetsSlice.actions.tagsAddError({
                assets: assets,
                error: {
                    message: (error === null || error === void 0 ? void 0 : error.message) || 'Internal error',
                    statusCode: (error === null || error === void 0 ? void 0 : error.statusCode) || 500
                },
                tag: tag
            }));
        }));
    }));
};
exports.assetsRemoveTagsEpic = assetsRemoveTagsEpic;
var assetsOrderSetEpic = function (action$) {
    return action$.pipe(operators_1.filter(assetsSlice.actions.orderSet.match), operators_1.switchMap(function () {
        return rxjs_1.of(assetsSlice.actions.clear(), //
        assetsSlice.actions.loadPageIndex({ pageIndex: 0 }));
    }));
};
exports.assetsOrderSetEpic = assetsOrderSetEpic;
var assetsSearchEpic = function (action$) {
    return action$.pipe(redux_observable_1.ofType(searchSlice_1.facetsAdd.type, searchSlice_1.facetsClear.type, searchSlice_1.facetsRemove.type, searchSlice_1.facetsTagAddOrUpdate.type, searchSlice_1.facetsUpdate.type, searchSlice_1.querySet.type), operators_1.debounceTime(400), operators_1.switchMap(function () {
        return rxjs_1.of(assetsSlice.actions.clear(), //
        assetsSlice.actions.loadPageIndex({ pageIndex: 0 }));
    }));
};
exports.assetsSearchEpic = assetsSearchEpic;
var assetsListenerDeleteQueueEpic = function (action$) {
    return action$.pipe(operators_1.filter(assetsSlice.actions.listenerDeleteQueue.match), operators_1.bufferTime(2000), operators_1.filter(function (actions) { return actions.length > 0; }), operators_1.switchMap(function (actions) {
        var assetIds = actions === null || actions === void 0 ? void 0 : actions.map(function (action) { return action.payload.assetId; });
        return rxjs_1.of(assetsSlice.actions.listenerDeleteComplete({ assetIds: assetIds }));
    }));
};
exports.assetsListenerDeleteQueueEpic = assetsListenerDeleteQueueEpic;
var assetsListenerUpdateQueueEpic = function (action$) {
    return action$.pipe(operators_1.filter(assetsSlice.actions.listenerUpdateQueue.match), operators_1.bufferTime(2000), operators_1.filter(function (actions) { return actions.length > 0; }), operators_1.switchMap(function (actions) {
        var assets = actions === null || actions === void 0 ? void 0 : actions.map(function (action) { return action.payload.asset; });
        return rxjs_1.of(assetsSlice.actions.listenerUpdateComplete({ assets: assets }));
    }));
};
exports.assetsListenerUpdateQueueEpic = assetsListenerUpdateQueueEpic;
var assetsSortEpic = function (action$) {
    return action$.pipe(redux_observable_1.ofType(assetsSlice.actions.listenerUpdateComplete.type, //
    assetsSlice.actions.updateComplete.type), operators_1.bufferTime(1000), operators_1.filter(function (actions) { return actions.length > 0; }), operators_1.switchMap(function () {
        return rxjs_1.of(assetsSlice.actions.sort());
    }));
};
exports.assetsSortEpic = assetsSortEpic;
var assetsTagsAddEpic = function (action$, state$) {
    return action$.pipe(operators_1.filter(assetsSlice.actions.tagsAddRequest.match), operators_1.withLatestFrom(state$), operators_1.mergeMap(function (_a) {
        var action = _a[0], state = _a[1];
        var _b = action.payload, assets = _b.assets, tag = _b.tag;
        return rxjs_1.of(action).pipe(
        // Optionally throttle
        debugThrottle_1.default(state.debug.badConnection), 
        // Add tag references to all picked assets
        operators_1.mergeMap(function () {
            var pickedAssets = exports.selectAssetsPicked(state);
            // Filter out picked assets which already include tag
            var pickedAssetsFiltered = pickedAssets === null || pickedAssets === void 0 ? void 0 : pickedAssets.filter(function (assetItem) {
                var _a, _b, _c, _d, _e;
                var tagIndex = (_e = (_d = (_c = (_b = (_a = assetItem === null || assetItem === void 0 ? void 0 : assetItem.asset) === null || _a === void 0 ? void 0 : _a.opt) === null || _b === void 0 ? void 0 : _b.media) === null || _c === void 0 ? void 0 : _c.tags) === null || _d === void 0 ? void 0 : _d.findIndex(function (t) { return t._ref === (tag === null || tag === void 0 ? void 0 : tag._id); })) !== null && _e !== void 0 ? _e : -1;
                return tagIndex < 0;
            });
            var transaction = pickedAssetsFiltered.reduce(function (transaction, pickedAsset) {
                var _a;
                return transaction.patch((_a = pickedAsset === null || pickedAsset === void 0 ? void 0 : pickedAsset.asset) === null || _a === void 0 ? void 0 : _a._id, function (patch) {
                    var _a;
                    return patch
                        .ifRevisionId((_a = pickedAsset === null || pickedAsset === void 0 ? void 0 : pickedAsset.asset) === null || _a === void 0 ? void 0 : _a._rev)
                        .setIfMissing({ opt: {} })
                        .setIfMissing({ 'opt.media': {} })
                        .setIfMissing({ 'opt.media.tags': [] })
                        .append('opt.media.tags', [
                        { _key: nanoid_1.nanoid(), _ref: tag === null || tag === void 0 ? void 0 : tag._id, _type: 'reference', _weak: true }
                    ]);
                });
            }, client_1.default.transaction());
            return rxjs_1.from(transaction.commit());
        }), 
        // Dispatch complete action
        operators_1.mergeMap(function () { return rxjs_1.of(assetsSlice.actions.tagsAddComplete({ assets: assets, tag: tag })); }), operators_1.catchError(function (error) {
            return rxjs_1.of(assetsSlice.actions.tagsAddError({
                assets: assets,
                error: {
                    message: (error === null || error === void 0 ? void 0 : error.message) || 'Internal error',
                    statusCode: (error === null || error === void 0 ? void 0 : error.statusCode) || 500
                },
                tag: tag
            }));
        }));
    }));
};
exports.assetsTagsAddEpic = assetsTagsAddEpic;
var assetsTagsRemoveEpic = function (action$, state$) {
    return action$.pipe(operators_1.filter(assetsSlice.actions.tagsRemoveRequest.match), operators_1.withLatestFrom(state$), operators_1.mergeMap(function (_a) {
        var action = _a[0], state = _a[1];
        var _b = action.payload, assets = _b.assets, tag = _b.tag;
        return rxjs_1.of(action).pipe(
        // Optionally throttle
        debugThrottle_1.default(state.debug.badConnection), 
        // Remove tag references from all picked assets
        operators_1.mergeMap(function () {
            var pickedAssets = exports.selectAssetsPicked(state);
            var transaction = pickedAssets.reduce(function (transaction, pickedAsset) {
                var _a;
                return transaction.patch((_a = pickedAsset === null || pickedAsset === void 0 ? void 0 : pickedAsset.asset) === null || _a === void 0 ? void 0 : _a._id, function (patch) {
                    var _a;
                    return patch
                        .ifRevisionId((_a = pickedAsset === null || pickedAsset === void 0 ? void 0 : pickedAsset.asset) === null || _a === void 0 ? void 0 : _a._rev)
                        .unset(["opt.media.tags[_ref == \"" + tag._id + "\"]"]);
                });
            }, client_1.default.transaction());
            return rxjs_1.from(transaction.commit());
        }), 
        // Dispatch complete action
        operators_1.mergeMap(function () { return rxjs_1.of(assetsSlice.actions.tagsRemoveComplete({ assets: assets, tag: tag })); }), operators_1.catchError(function (error) {
            return rxjs_1.of(assetsSlice.actions.tagsRemoveError({
                assets: assets,
                error: {
                    message: (error === null || error === void 0 ? void 0 : error.message) || 'Internal error',
                    statusCode: (error === null || error === void 0 ? void 0 : error.statusCode) || 500
                },
                tag: tag
            }));
        }));
    }));
};
exports.assetsTagsRemoveEpic = assetsTagsRemoveEpic;
var assetsUnpickEpic = function (action$) {
    return action$.pipe(redux_observable_1.ofType(assetsSlice.actions.orderSet.type, assetsSlice.actions.viewSet.type, searchSlice_1.facetsAdd.type, searchSlice_1.facetsClear.type, searchSlice_1.facetsRemove.type, searchSlice_1.facetsTagAddOrUpdate.type, searchSlice_1.facetsUpdate.type, searchSlice_1.querySet.type), operators_1.switchMap(function () {
        return rxjs_1.of(assetsSlice.actions.pickClear());
    }));
};
exports.assetsUnpickEpic = assetsUnpickEpic;
var assetsUpdateEpic = function (action$, state$) {
    return action$.pipe(operators_1.filter(assetsSlice.actions.updateRequest.match), operators_1.withLatestFrom(state$), operators_1.mergeMap(function (_a) {
        var action = _a[0], state = _a[1];
        var _b = action.payload, asset = _b.asset, closeDialogId = _b.closeDialogId, formData = _b.formData;
        return rxjs_1.of(action).pipe(debugThrottle_1.default(state.debug.badConnection), operators_1.mergeMap(function () {
            return rxjs_1.from(client_1.default
                .patch(asset._id)
                .setIfMissing({ opt: {} })
                .setIfMissing({ 'opt.media': {} })
                .set(formData)
                .commit());
        }), operators_1.mergeMap(function (updatedAsset) {
            return rxjs_1.of(assetsSlice.actions.updateComplete({
                assetId: updatedAsset._id,
                closeDialogId: closeDialogId
            }));
        }), operators_1.catchError(function (error) {
            return rxjs_1.of(assetsSlice.actions.updateError({
                asset: asset,
                error: {
                    message: (error === null || error === void 0 ? void 0 : error.message) || 'Internal error',
                    statusCode: (error === null || error === void 0 ? void 0 : error.statusCode) || 500
                }
            }));
        }));
    }));
};
exports.assetsUpdateEpic = assetsUpdateEpic;
// Selectors
var selectAssetsByIds = function (state) { return state.assets.byIds; };
var selectAssetsAllIds = function (state) { return state.assets.allIds; };
exports.selectAssetById = toolkit_1.createSelector([
    function (state) { return state.assets.byIds; },
    function (_state, assetId) { return assetId; }
], function (byIds, assetId) { return byIds[assetId]; });
exports.selectAssets = toolkit_1.createSelector([selectAssetsByIds, selectAssetsAllIds], function (byIds, allIds) { return allIds.map(function (id) { return byIds[id]; }); });
exports.selectAssetsLength = toolkit_1.createSelector([exports.selectAssets], function (assets) { return assets.length; });
exports.selectAssetsPicked = toolkit_1.createSelector([exports.selectAssets], function (assets) {
    return assets.filter(function (item) { return item === null || item === void 0 ? void 0 : item.picked; });
});
exports.selectAssetsPickedLength = toolkit_1.createSelector([exports.selectAssetsPicked], function (assetsPicked) { return assetsPicked.length; });
exports.clear = (_a = assetsSlice.actions, _a.clear), exports.deleteComplete = _a.deleteComplete, exports.deleteError = _a.deleteError, exports.deletePicked = _a.deletePicked, exports.deleteRequest = _a.deleteRequest, exports.fetchComplete = _a.fetchComplete, exports.fetchError = _a.fetchError, exports.fetchRequest = _a.fetchRequest, exports.listenerDeleteComplete = _a.listenerDeleteComplete, exports.listenerDeleteQueue = _a.listenerDeleteQueue, exports.listenerUpdateComplete = _a.listenerUpdateComplete, exports.listenerUpdateQueue = _a.listenerUpdateQueue, exports.loadNextPage = _a.loadNextPage, exports.loadPageIndex = _a.loadPageIndex, exports.orderSet = _a.orderSet, exports.pick = _a.pick, exports.pickAll = _a.pickAll, exports.pickClear = _a.pickClear, exports.pickRange = _a.pickRange, exports.sort = _a.sort, exports.tagsAddComplete = _a.tagsAddComplete, exports.tagsAddError = _a.tagsAddError, exports.tagsAddRequest = _a.tagsAddRequest, exports.tagsRemoveComplete = _a.tagsRemoveComplete, exports.tagsRemoveError = _a.tagsRemoveError, exports.tagsRemoveRequest = _a.tagsRemoveRequest, exports.updateComplete = _a.updateComplete, exports.updateError = _a.updateError, exports.updateRequest = _a.updateRequest, exports.viewSet = _a.viewSet;
exports.default = assetsSlice.reducer;
var templateObject_1, templateObject_2, templateObject_3, templateObject_4;
