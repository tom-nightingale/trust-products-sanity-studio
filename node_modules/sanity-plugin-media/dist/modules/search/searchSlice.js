"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.querySet = exports.facetsUpdate = exports.facetsTagAddOrUpdate = exports.facetsRemove = exports.facetsClear = exports.facetsAdd = exports.selectIsSearchFacetTag = exports.selectHasSearchFacetTag = exports.searchFacetTagUpdateEpic = void 0;
var toolkit_1 = require("@reduxjs/toolkit");
var rxjs_1 = require("rxjs");
var operators_1 = require("rxjs/operators");
var tagsSlice_1 = require("../tags/tagsSlice");
var initialState = {
    facets: [],
    query: ''
};
var searchSlice = toolkit_1.createSlice({
    name: 'search',
    initialState: initialState,
    reducers: {
        // Add search facet
        facetsAdd: function (state, action) {
            state.facets.push(action.payload.facet);
        },
        // Clear all search facets
        facetsClear: function (state) {
            state.facets = [];
        },
        // Remove search facet by name
        facetsRemove: function (state, action) {
            state.facets = state.facets.filter(function (facet) { return facet.name !== action.payload.facetName; });
        },
        // Add or update existing facet
        // TODO: refactor out
        facetsTagAddOrUpdate: function (state, action) {
            var _a, _b;
            var tag = (_a = action === null || action === void 0 ? void 0 : action.payload) === null || _a === void 0 ? void 0 : _a.tag;
            var searchFacetTagIndex = state.facets.findIndex(function (facet) { return facet.name === 'tag'; });
            // TODO: DRY
            var searchFacet = {
                contexts: 'all',
                field: 'opt.media.tags',
                name: 'tag',
                operatorType: 'references',
                operatorTypes: ['references', 'doesNotReference', null, 'empty', 'notEmpty'],
                title: 'Tags',
                type: 'searchable',
                value: {
                    label: (_b = tag === null || tag === void 0 ? void 0 : tag.name) === null || _b === void 0 ? void 0 : _b.current,
                    value: tag === null || tag === void 0 ? void 0 : tag._id
                }
            };
            if (searchFacetTagIndex >= 0) {
                state.facets[searchFacetTagIndex] = searchFacet;
            }
            else {
                state.facets.push(searchFacet);
            }
        },
        // Update an existing search facet
        facetsUpdate: function (state, action) {
            var _a = action.payload, modifier = _a.modifier, name = _a.name, operatorType = _a.operatorType, value = _a.value;
            state.facets.forEach(function (facet, index) {
                if (facet.name === name) {
                    if (facet.type === 'number' && modifier) {
                        facet.modifier = modifier;
                    }
                    if (operatorType) {
                        facet.operatorType = operatorType;
                    }
                    if (typeof value !== 'undefined') {
                        state.facets[index].value = value;
                    }
                }
            });
        },
        // Update existing search query
        querySet: function (state, action) {
            var _a;
            state.query = (_a = action.payload) === null || _a === void 0 ? void 0 : _a.searchQuery;
        }
    }
});
// On tag update success -> update existing tag search facet (if present)
var searchFacetTagUpdateEpic = function (action$, state$) {
    return action$.pipe(operators_1.filter(tagsSlice_1.updateComplete.match), operators_1.withLatestFrom(state$), operators_1.mergeMap(function (_a) {
        var _b, _c, _d, _e, _f;
        var action = _a[0], state = _a[1];
        var tagId = action.payload.tagId;
        var currentSearchFacetTag = (_b = state.search.facets) === null || _b === void 0 ? void 0 : _b.find(function (facet) { return facet.name === 'tag'; });
        var tagItem = state.tags.byIds[tagId];
        if ((currentSearchFacetTag === null || currentSearchFacetTag === void 0 ? void 0 : currentSearchFacetTag.type) === 'searchable') {
            if (((_c = currentSearchFacetTag.value) === null || _c === void 0 ? void 0 : _c.value) === tagId) {
                return rxjs_1.of(searchSlice.actions.facetsUpdate({
                    name: 'tag',
                    value: {
                        label: (_e = (_d = tagItem === null || tagItem === void 0 ? void 0 : tagItem.tag) === null || _d === void 0 ? void 0 : _d.name) === null || _e === void 0 ? void 0 : _e.current,
                        value: (_f = tagItem === null || tagItem === void 0 ? void 0 : tagItem.tag) === null || _f === void 0 ? void 0 : _f._id
                    }
                }));
            }
        }
        return rxjs_1.empty();
    }));
};
exports.searchFacetTagUpdateEpic = searchFacetTagUpdateEpic;
// Selectors
exports.selectHasSearchFacetTag = toolkit_1.createSelector(function (state) { return state.search.facets; }, function (searchFacets) { var _a; return !!((_a = searchFacets === null || searchFacets === void 0 ? void 0 : searchFacets.find(function (facet) { return facet.name === 'tag'; })) === null || _a === void 0 ? void 0 : _a.value); });
exports.selectIsSearchFacetTag = toolkit_1.createSelector([
    function (state) { return state.tags.byIds; },
    function (state) { return state.search.facets; },
    function (_state, tagId) { return tagId; }
], function (tagsByIds, searchFacets, tagId) {
    var _a, _b, _c;
    var searchFacet = searchFacets === null || searchFacets === void 0 ? void 0 : searchFacets.find(function (facet) { return facet.name === 'tag'; });
    if ((searchFacet === null || searchFacet === void 0 ? void 0 : searchFacet.type) === 'searchable') {
        var searchFacetTagId = (_a = searchFacet.value) === null || _a === void 0 ? void 0 : _a.value;
        if (searchFacetTagId) {
            return (((_c = (_b = tagsByIds[searchFacetTagId]) === null || _b === void 0 ? void 0 : _b.tag) === null || _c === void 0 ? void 0 : _c._id) === tagId &&
                (searchFacet === null || searchFacet === void 0 ? void 0 : searchFacet.operatorType) === 'references');
        }
    }
    return false;
});
exports.facetsAdd = (_a = searchSlice.actions, _a.facetsAdd), exports.facetsClear = _a.facetsClear, exports.facetsRemove = _a.facetsRemove, exports.facetsTagAddOrUpdate = _a.facetsTagAddOrUpdate, exports.facetsUpdate = _a.facetsUpdate, exports.querySet = _a.querySet;
exports.default = searchSlice.reducer;
