"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.showTags = exports.showTagEdit = exports.showTagCreate = exports.showSearchFacets = exports.showDetails = exports.showConfirmDeleteTag = exports.showConfirmDeleteAssetsPicked = exports.showConfirmDeleteAsset = exports.showConfirmAssetsTagRemove = exports.showConfirmAssetsTagAdd = exports.remove = exports.clear = exports.addCreatedTag = exports.dialogTagCreateEpic = exports.dialogClearOnAssetUpdateEpic = void 0;
var toolkit_1 = require("@reduxjs/toolkit");
var pluralize_1 = __importDefault(require("pluralize"));
var react_1 = __importDefault(require("react"));
var redux_observable_1 = require("redux-observable");
var rxjs_1 = require("rxjs");
var operators_1 = require("rxjs/operators");
var assets_1 = require("../assets");
var tagsSlice_1 = require("../tags/tagsSlice");
var initialState = {
    items: []
};
var dialogSlice = toolkit_1.createSlice({
    name: 'dialog',
    initialState: initialState,
    reducers: {
        // TODO: refactor out
        // Add created tag to assetEdit dialog
        addCreatedTag: function (state, action) {
            state.items.forEach(function (item) {
                if (item.type === 'assetEdit' && item.assetId === action.payload.assetId) {
                    item.lastCreatedTagId = action.payload.tagId;
                }
            });
        },
        // Clear all dialogs
        clear: function (state) {
            state.items = [];
        },
        // Remove dialog by id
        remove: function (state, action) {
            var _a;
            var id = (_a = action.payload) === null || _a === void 0 ? void 0 : _a.id;
            state.items = state.items.filter(function (item) { return item.id !== id; });
        },
        showConfirmAssetsTagAdd: function (state, action) {
            var _a = action.payload, assetsPicked = _a.assetsPicked, closeDialogId = _a.closeDialogId, tag = _a.tag;
            var suffix = assetsPicked.length + " " + pluralize_1.default('asset', assetsPicked.length);
            state.items.push({
                closeDialogId: closeDialogId,
                // TODO: replace with slice action
                confirmCallbackAction: assets_1.tagsAddRequest({
                    assets: assetsPicked,
                    tag: tag
                }),
                confirmText: "Yes, add tag to " + suffix,
                title: (react_1.default.createElement("span", null,
                    "Add tag ",
                    react_1.default.createElement("span", { style: { fontWeight: 600 } }, tag.name.current),
                    " to ",
                    suffix,
                    "?")),
                id: 'confirm',
                headerTitle: 'Confirm tag addition',
                tone: 'primary',
                type: 'confirm'
            });
        },
        showConfirmAssetsTagRemove: function (state, action) {
            var _a = action.payload, assetsPicked = _a.assetsPicked, closeDialogId = _a.closeDialogId, tag = _a.tag;
            var suffix = assetsPicked.length + " " + pluralize_1.default('asset', assetsPicked.length);
            state.items.push({
                closeDialogId: closeDialogId,
                confirmCallbackAction: assets_1.tagsRemoveRequest({ assets: assetsPicked, tag: tag }),
                confirmText: "Yes, remove tag from " + suffix,
                headerTitle: 'Confirm tag removal',
                id: 'confirm',
                title: (react_1.default.createElement("span", null,
                    "Remove tag ",
                    react_1.default.createElement("span", { style: { fontWeight: 600 } }, tag.name.current),
                    " from ",
                    suffix,
                    "?")),
                tone: 'primary',
                type: 'confirm'
            });
        },
        showConfirmDeleteAsset: function (state, action) {
            var _a = action.payload, asset = _a.asset, closeDialogId = _a.closeDialogId;
            var suffix = 'asset';
            state.items.push({
                closeDialogId: closeDialogId,
                confirmCallbackAction: assets_1.deleteRequest({ asset: asset }),
                confirmText: "Yes, delete " + suffix,
                description: 'This operation cannot be reversed. Are you sure you want to continue?',
                title: "Permanently delete " + suffix + "?",
                id: 'confirm',
                headerTitle: 'Confirm deletion',
                tone: 'critical',
                type: 'confirm'
            });
        },
        showConfirmDeleteAssetsPicked: function (state, action) {
            var _a = action.payload, assetsPicked = _a.assetsPicked, closeDialogId = _a.closeDialogId;
            var suffix = assetsPicked.length + " " + pluralize_1.default('asset', assetsPicked.length);
            state.items.push({
                closeDialogId: closeDialogId,
                confirmCallbackAction: assets_1.deletePicked(),
                confirmText: "Yes, delete " + suffix,
                description: 'This operation cannot be reversed. Are you sure you want to continue?',
                title: "Permanently delete " + suffix + "?",
                id: 'confirm',
                headerTitle: 'Confirm deletion',
                tone: 'critical',
                type: 'confirm'
            });
        },
        showConfirmDeleteTag: function (state, action) {
            var _a = action.payload, closeDialogId = _a.closeDialogId, tag = _a.tag;
            var suffix = 'tag';
            state.items.push({
                closeDialogId: closeDialogId,
                confirmCallbackAction: tagsSlice_1.deleteRequest({ tag: tag }),
                confirmText: "Yes, delete " + suffix,
                description: 'This operation cannot be reversed. Are you sure you want to continue?',
                title: "Permanently delete " + suffix + "?",
                id: 'confirm',
                headerTitle: 'Confirm deletion',
                tone: 'critical',
                type: 'confirm'
            });
        },
        showDetails: function (state, action) {
            var assetId = action.payload.assetId;
            state.items.push({
                assetId: assetId,
                id: assetId,
                type: 'assetEdit'
            });
        },
        showSearchFacets: function (state) {
            state.items.push({
                id: 'searchFacets',
                type: 'searchFacets'
            });
        },
        showTagCreate: function (state) {
            state.items.push({
                id: 'tagCreate',
                type: 'tagCreate'
            });
        },
        showTagEdit: function (state, action) {
            var tagId = action.payload.tagId;
            state.items.push({
                id: tagId,
                tagId: tagId,
                type: 'tagEdit'
            });
        },
        showTags: function (state) {
            state.items.push({
                id: 'tags',
                type: 'tags'
            });
        }
    }
});
var dialogClearOnAssetUpdateEpic = function (action$) {
    return action$.pipe(redux_observable_1.ofType(assets_1.deleteComplete.type, assets_1.updateComplete.type, tagsSlice_1.deleteComplete.type, tagsSlice_1.updateComplete.type), operators_1.filter(function (action) { var _a; return !!((_a = action === null || action === void 0 ? void 0 : action.payload) === null || _a === void 0 ? void 0 : _a.closeDialogId); }), operators_1.mergeMap(function (action) {
        var _a;
        var dialogId = (_a = action === null || action === void 0 ? void 0 : action.payload) === null || _a === void 0 ? void 0 : _a.closeDialogId;
        if (dialogId) {
            return rxjs_1.of(dialogSlice.actions.remove({ id: dialogId }));
        }
        else {
            return rxjs_1.empty();
        }
    }));
};
exports.dialogClearOnAssetUpdateEpic = dialogClearOnAssetUpdateEpic;
var dialogTagCreateEpic = function (action$) {
    return action$.pipe(operators_1.filter(tagsSlice_1.createComplete.match), operators_1.mergeMap(function (action) {
        var _a = action === null || action === void 0 ? void 0 : action.payload, assetId = _a.assetId, tag = _a.tag;
        if (assetId) {
            return rxjs_1.of(dialogSlice.actions.addCreatedTag({ tagId: tag._id, assetId: assetId }));
        }
        if (tag._id) {
            return rxjs_1.of(dialogSlice.actions.remove({ id: 'tagCreate' }));
        }
        return rxjs_1.empty();
    }));
};
exports.dialogTagCreateEpic = dialogTagCreateEpic;
exports.addCreatedTag = (_a = dialogSlice.actions, _a.addCreatedTag), exports.clear = _a.clear, exports.remove = _a.remove, exports.showConfirmAssetsTagAdd = _a.showConfirmAssetsTagAdd, exports.showConfirmAssetsTagRemove = _a.showConfirmAssetsTagRemove, exports.showConfirmDeleteAsset = _a.showConfirmDeleteAsset, exports.showConfirmDeleteAssetsPicked = _a.showConfirmDeleteAssetsPicked, exports.showConfirmDeleteTag = _a.showConfirmDeleteTag, exports.showDetails = _a.showDetails, exports.showSearchFacets = _a.showSearchFacets, exports.showTagCreate = _a.showTagCreate, exports.showTagEdit = _a.showTagEdit, exports.showTags = _a.showTags;
exports.default = dialogSlice.reducer;
