"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var yup_1 = require("@hookform/resolvers/yup");
var ui_1 = require("@sanity/ui");
var react_1 = __importStar(require("react"));
var react_redux_1 = require("react-redux");
var react_hook_form_1 = require("react-hook-form");
var yup = __importStar(require("yup"));
var useTypedSelector_1 = __importDefault(require("../../hooks/useTypedSelector"));
var assets_1 = require("../../modules/assets");
var tags_1 = require("../../modules/tags");
var FormFieldInputFilename_1 = __importDefault(require("../FormFieldInputFilename"));
var FormFieldInputTags_1 = __importDefault(require("../FormFieldInputTags"));
var FormFieldInputText_1 = __importDefault(require("../FormFieldInputText"));
var FormFieldInputTextarea_1 = __importDefault(require("../FormFieldInputTextarea"));
var formSchema = yup.object().shape({
    originalFilename: yup.string().required('Filename cannot be empty')
});
var getFilenameWithoutExtension = function (asset) {
    var _a, _b;
    var extensionIndex = (_a = asset === null || asset === void 0 ? void 0 : asset.originalFilename) === null || _a === void 0 ? void 0 : _a.lastIndexOf("." + asset.extension);
    return (_b = asset === null || asset === void 0 ? void 0 : asset.originalFilename) === null || _b === void 0 ? void 0 : _b.slice(0, extensionIndex);
};
// Sanitize form data: convert empty strings and undefined values to null.
// null values will correctly unset / delete fields
var sanitizeFormData = function (formData) {
    return Object.keys(formData).reduce(function (acc, key) {
        if (formData[key] === '' || typeof formData[key] === 'undefined') {
            acc[key] = null;
        }
        else {
            acc[key] = formData[key];
        }
        return acc;
    }, {});
};
var FormDetails = function (props) {
    var _a, _b, _c;
    var asset = props.asset, itemUpdating = props.itemUpdating, lastCreatedTagId = props.lastCreatedTagId;
    // Refs
    var isMounted = react_1.useRef(false);
    // Redux
    var dispatch = react_redux_1.useDispatch();
    var tagIds = useTypedSelector_1.default(function (state) { return state.tags.allIds; });
    var tagsByIds = useTypedSelector_1.default(function (state) { return state.tags.byIds; });
    // TODO: make pure
    // Map tag references to react-select options, skip over items with nullish labels or values
    var generateTagOptions = function (asset) {
        var _a, _b, _c;
        var tags = (_c = (_b = (_a = asset === null || asset === void 0 ? void 0 : asset.opt) === null || _a === void 0 ? void 0 : _a.media) === null || _b === void 0 ? void 0 : _b.tags) === null || _c === void 0 ? void 0 : _c.reduce(function (acc, v) {
            var _a, _b;
            var tag = (_a = tagsByIds[v._ref]) === null || _a === void 0 ? void 0 : _a.tag;
            if (tag) {
                acc.push({
                    label: (_b = tag === null || tag === void 0 ? void 0 : tag.name) === null || _b === void 0 ? void 0 : _b.current,
                    value: tag === null || tag === void 0 ? void 0 : tag._id
                });
            }
            return acc;
        }, []);
        if (tags && (tags === null || tags === void 0 ? void 0 : tags.length) > 0) {
            return tags;
        }
        return null;
    };
    var generateDefaultValues = function (asset) { return ({
        altText: (asset === null || asset === void 0 ? void 0 : asset.altText) || '',
        description: (asset === null || asset === void 0 ? void 0 : asset.description) || '',
        originalFilename: asset ? getFilenameWithoutExtension(asset) : undefined,
        opt: {
            media: {
                tags: generateTagOptions(asset)
            }
        },
        title: (asset === null || asset === void 0 ? void 0 : asset.title) || ''
    }); };
    // react-hook-form
    var _d = react_hook_form_1.useForm({
        defaultValues: generateDefaultValues(asset),
        mode: 'onChange',
        resolver: yup_1.yupResolver(formSchema)
    }), control = _d.control, errors = _d.errors, formState = _d.formState, getValues = _d.getValues, handleSubmit = _d.handleSubmit, register = _d.register, reset = _d.reset, setValue = _d.setValue;
    // Generate a string from all current tag labels
    // This is used purely to determine tag updates to then update the form in real time
    var currentTagLabels = (_a = generateTagOptions(asset)) === null || _a === void 0 ? void 0 : _a.map(function (tag) { return tag.label; }).join(',');
    var allTagOptions = tagIds.reduce(function (acc, id) {
        var _a, _b;
        var tag = (_a = tagsByIds[id]) === null || _a === void 0 ? void 0 : _a.tag;
        if (tag) {
            acc.push({
                label: (_b = tag === null || tag === void 0 ? void 0 : tag.name) === null || _b === void 0 ? void 0 : _b.current,
                value: tag === null || tag === void 0 ? void 0 : tag._id
            });
        }
        return acc;
    }, []);
    // Callbacks
    var handleCreateTag = function (tagName) {
        // Dispatch action to create new tag
        dispatch(tags_1.tagsCreate(tagName, {
            assetId: asset === null || asset === void 0 ? void 0 : asset._id
        }));
    };
    // - submit react-hook-form
    var onSubmit = function (formData) { return __awaiter(void 0, void 0, void 0, function () {
        var sanitizedFormData;
        var _a;
        return __generator(this, function (_b) {
            if (!asset) {
                return [2 /*return*/];
            }
            sanitizedFormData = sanitizeFormData(formData);
            dispatch(assets_1.assetsUpdate(asset, __assign(__assign({}, sanitizedFormData), { 
                // Map tags to sanity references
                opt: {
                    media: __assign(__assign({}, sanitizedFormData.opt.media), { tags: ((_a = sanitizedFormData.opt.media.tags) === null || _a === void 0 ? void 0 : _a.map(function (tag) { return ({
                            _ref: tag.value,
                            _type: 'reference',
                            _weak: true
                        }); })) || null })
                }, 
                // Append extension to filename
                originalFilename: sanitizedFormData.originalFilename + "." + asset.extension }), 
            // Options
            {
                closeDialogId: asset._id
            }));
            return [2 /*return*/];
        });
    }); };
    // Effects
    // - Update tags field with new tag if one has been created
    react_1.useEffect(function () {
        var _a;
        if (lastCreatedTagId) {
            var tag = (_a = tagsByIds[lastCreatedTagId]) === null || _a === void 0 ? void 0 : _a.tag;
            if (tag) {
                var existingTags = getValues('opt.media.tags') || [];
                var updatedTags = existingTags.concat([
                    {
                        label: tag.name.current,
                        value: tag._id
                    }
                ]);
                setValue('opt.media.tags', updatedTags, { shouldDirty: true });
            }
        }
    }, [lastCreatedTagId]);
    // - Partially reset form when current tags have changed (and after initial mount)
    react_1.useEffect(function () {
        if (isMounted.current) {
            reset({
                opt: { media: { tags: generateTagOptions(asset) } }
            }, {
                errors: true,
                dirtyFields: true,
                isDirty: true
            });
        }
        // Mark as mounted
        isMounted.current = true;
    }, [currentTagLabels]);
    return (react_1.default.createElement(ui_1.Box, { as: "form", onSubmit: handleSubmit(onSubmit) },
        react_1.default.createElement("button", { style: { display: 'none' }, tabIndex: -1, type: "submit" }),
        react_1.default.createElement(ui_1.Stack, { space: 3 },
            react_1.default.createElement(FormFieldInputTags_1.default, { control: control, disabled: itemUpdating, error: (_c = (_b = errors === null || errors === void 0 ? void 0 : errors.opt) === null || _b === void 0 ? void 0 : _b.media) === null || _c === void 0 ? void 0 : _c.tags, label: "Tags", name: "opt.media.tags", onCreateTag: handleCreateTag, options: allTagOptions, placeholder: "Select or create...", value: generateTagOptions(asset) }),
            react_1.default.createElement(FormFieldInputFilename_1.default, { disabled: itemUpdating, error: errors === null || errors === void 0 ? void 0 : errors.originalFilename, extension: (asset === null || asset === void 0 ? void 0 : asset.extension) || '', label: "Filename", name: "originalFilename", ref: register, value: getFilenameWithoutExtension(asset) }),
            react_1.default.createElement(FormFieldInputText_1.default, { disabled: itemUpdating, error: errors === null || errors === void 0 ? void 0 : errors.title, label: "Title", name: "title", ref: register, value: asset === null || asset === void 0 ? void 0 : asset.title }),
            react_1.default.createElement(FormFieldInputText_1.default, { disabled: itemUpdating, error: errors === null || errors === void 0 ? void 0 : errors.altText, label: "Alt Text", name: "altText", ref: register, value: asset === null || asset === void 0 ? void 0 : asset.altText }),
            react_1.default.createElement(FormFieldInputTextarea_1.default, { disabled: itemUpdating, error: errors === null || errors === void 0 ? void 0 : errors.description, label: "Description", name: "description", ref: register, rows: 3, value: asset === null || asset === void 0 ? void 0 : asset.description }))));
};
exports.default = FormDetails;
