"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var ui_1 = require("@sanity/ui");
var react_1 = __importStar(require("react"));
var react_window_1 = require("react-window");
var useTypedSelector_1 = __importDefault(require("../../hooks/useTypedSelector"));
var TableHeader_1 = __importDefault(require("../TableHeader"));
var TableRowAsset_1 = __importDefault(require("../TableRowAsset"));
var TableRowUpload_1 = __importDefault(require("../TableRowUpload"));
var innerElementType = function (props) {
    var children = props.children, style = props.style;
    return (react_1.default.createElement(react_1.default.Fragment, null,
        react_1.default.createElement(TableHeader_1.default, null),
        react_1.default.createElement(ui_1.Box, { style: {
                position: 'absolute',
                width: '100%'
            } },
            react_1.default.createElement("div", { style: style }, children))));
};
var VirtualRow = react_1.memo(function (props) {
    var data = props.data, index = props.index, style = props.style;
    var items = data.items, selectedIds = data.selectedIds;
    var item = items[index];
    // Add padding to virtual rows
    var rowStyle = __assign(__assign({}, style), { top: Number(style.top), height: Number(style.height) });
    if ((item === null || item === void 0 ? void 0 : item.type) === 'asset') {
        return react_1.default.createElement(TableRowAsset_1.default, { id: item.id, selected: selectedIds.includes(item === null || item === void 0 ? void 0 : item.id), style: rowStyle });
    }
    if ((item === null || item === void 0 ? void 0 : item.type) === 'upload') {
        return react_1.default.createElement(TableRowUpload_1.default, { id: item.id, style: rowStyle });
    }
    return null;
}, react_window_1.areEqual);
var Table = react_1.forwardRef(function (props, ref) {
    var height = props.height, items = props.items, onItemsRendered = props.onItemsRendered, width = props.width;
    // Redux
    var selectedAssets = useTypedSelector_1.default(function (state) { return state.selected.assets; });
    var selectedIds = (selectedAssets && selectedAssets.map(function (asset) { return asset._id; })) || [];
    var totalCount = items.length;
    var itemKey = function (index) {
        var item = items[index];
        return (item === null || item === void 0 ? void 0 : item.id) || index;
    };
    return (react_1.default.createElement(react_window_1.FixedSizeList, { className: "media__custom-scrollbar", height: height, innerElementType: innerElementType, itemData: {
            items: items,
            selectedIds: selectedIds
        }, itemCount: totalCount, itemKey: itemKey, itemSize: 100, onItemsRendered: onItemsRendered, ref: ref, style: {
            position: 'relative',
            overflowX: 'hidden',
            overflowY: 'scroll'
        }, width: width }, VirtualRow));
});
exports.default = Table;
//# sourceMappingURL=index.js.map