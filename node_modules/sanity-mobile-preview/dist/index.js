function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var React = require('react');
var React__default = _interopDefault(React);

function _unsupportedIterableToArray(o, minLen) {
  if (!o) return;
  if (typeof o === "string") return _arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor) n = o.constructor.name;
  if (n === "Map" || n === "Set") return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
}

function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length) len = arr.length;

  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];

  return arr2;
}

function _createForOfIteratorHelperLoose(o, allowArrayLike) {
  var it;

  if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) {
    if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
      if (it) o = it;
      var i = 0;
      return function () {
        if (i >= o.length) return {
          done: true
        };
        return {
          done: false,
          value: o[i++]
        };
      };
    }

    throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }

  it = o[Symbol.iterator]();
  return it.next.bind(it);
}

var mobileStyle = {"marvel-device":"_13C-O","screen":"_2Amsc","top-bar":"_qECU0","bottom-bar":"_F6bPa","middle-bar":"_fA7mw","iphone8":"_1sXT5","home":"_25p7s","sleep":"_2EZnX","volume":"_2FPQW","camera":"_h5ppK","sensor":"_2Ok-6","speaker":"_fUVii","gold":"_11BBn","black":"_jzkBO","landscape":"_1c67x","iphone8plus":"_2PCMV","iphone5s":"_3IA0l","iphone5c":"_Fd4kN","silver":"_smL3H","red":"_lNRoC","yellow":"_2zwSd","green":"_11nfu","blue":"_16rvF","iphone4s":"_1C99G","nexus5":"_3Ff4H","s5":"_3nyHv","lumia920":"_2gvlt","white":"_3YXIg","htc-one":"_Xbf-e","ipad":"_2OuCL","macbook":"_rglbn","iphone-x":"_36eC8","overflow":"_2l71V","shadow":"_3P-q4","shadow--tl":"_3bHFp","shadow--tr":"_2e2kx","shadow--bl":"_3rXur","shadow--br":"_nbUm4","inner-shadow":"_3Gknh","notch":"_1-RqF","note8":"_1gDBY","sensors":"_3iESW","more-sensors":"_O3CEj","inner":"_E-ixb"};

var BuildDevice = function BuildDevice(_ref) {
  var selectedDevice = _ref.selectedDevice,
      selectedColor = _ref.selectedColor,
      landscape = _ref.landscape,
      children = _ref.children;

  var _useState = React.useState(''),
      rootDeviceClass = _useState[0],
      setRootDeviceClass = _useState[1];

  React.useEffect(function () {
    var colors = selectedDevice.colors;
    var hasColor = colors.includes(selectedColor);
    var color = hasColor ? selectedColor : 'black';
    var tempRootDeviceClass = mobileStyle['marvel-device'] + "  " + mobileStyle[selectedDevice.type] + " " + mobileStyle[color];
    if (landscape) tempRootDeviceClass += ' ' + mobileStyle.landscape;
    setRootDeviceClass(tempRootDeviceClass);
  }, [selectedDevice, selectedColor, landscape]);
  return React__default.createElement("div", {
    className: rootDeviceClass
  }, renderer(selectedDevice.style, children));
};

function renderer(mobileDeviceStyleNodes, children) {
  return mobileDeviceStyleNodes.map(function (style, index) {
    return React.createElement('div', {
      className: Array.isArray(style.className) ? convertClassNameArrayToClassName(style.className) : mobileStyle[style.className],
      key: 'mobileStyle' + index
    }, style.className === 'screen' ? children : style.children && renderer(style.children, children));
  });
}

var convertClassNameArrayToClassName = function convertClassNameArrayToClassName(classNameArray) {
  var res = '';

  for (var _iterator = _createForOfIteratorHelperLoose(classNameArray), _step; !(_step = _iterator()).done;) {
    var style = _step.value;
    res += mobileStyle[style] + " ";
  }

  return res;
};

var devices = {
  'iphone-x': {
    type: 'iphone-x',
    readableName: 'iPhone X',
    colors: ['black'],
    style: [{
      className: 'notch',
      children: [{
        className: 'camera'
      }, {
        className: 'speaker'
      }]
    }, {
      className: 'top-bar'
    }, {
      className: 'sleep'
    }, {
      className: 'bottom-bar'
    }, {
      className: 'volume'
    }, {
      className: 'overflow',
      children: [{
        className: ['shadow', 'shadow--tr']
      }, {
        className: ['shadow', 'shadow--tl']
      }, {
        className: ['shadow', 'shadow--br']
      }, {
        className: ['shadow', 'shadow--bl']
      }]
    }, {
      className: 'inner-shadow'
    }, {
      className: 'screen'
    }]
  },
  note8: {
    type: 'note8',
    readableName: 'Note 8',
    colors: ['black'],
    style: [{
      className: 'inner'
    }, {
      className: 'overflow',
      children: [{
        className: 'shadow'
      }]
    }, {
      className: 'speaker'
    }, {
      className: 'sensors'
    }, {
      className: 'more-sensors'
    }, {
      className: 'sleep'
    }, {
      className: 'volume'
    }, {
      className: 'camera'
    }, {
      className: 'screen'
    }]
  },
  iphone8: {
    type: 'iphone8',
    readableName: 'iPhone 8',
    colors: ['black', 'silver', 'gold'],
    style: [{
      className: 'top-bar'
    }, {
      className: 'sleep'
    }, {
      className: 'volume'
    }, {
      className: 'camera'
    }, {
      className: 'sensor'
    }, {
      className: 'speaker'
    }, {
      className: 'screen'
    }, {
      className: 'home'
    }, {
      className: 'bottom-bar'
    }]
  },
  iphone8plus: {
    type: 'iphone8plus',
    readableName: 'iPhone 8 plus',
    colors: ['black', 'silver', 'gold'],
    style: [{
      className: 'top-bar'
    }, {
      className: 'sleep'
    }, {
      className: 'volume'
    }, {
      className: 'camera'
    }, {
      className: 'sensor'
    }, {
      className: 'speaker'
    }, {
      className: 'screen'
    }, {
      className: 'home'
    }, {
      className: 'bottom-bar'
    }]
  },
  iphone5s: {
    type: 'iphone5s',
    readableName: 'iPhone 5s',
    colors: ['black', 'silver', 'gold'],
    style: [{
      className: 'top-bar'
    }, {
      className: 'sleep'
    }, {
      className: 'volume'
    }, {
      className: 'camera'
    }, {
      className: 'sensor'
    }, {
      className: 'speaker'
    }, {
      className: 'screen'
    }, {
      className: 'home'
    }, {
      className: 'bottom-bar'
    }]
  },
  ipad: {
    type: 'ipad',
    readableName: 'iPad mini',
    colors: ['black', 'silver'],
    style: [{
      className: 'camera'
    }, {
      className: 'screen'
    }, {
      className: 'home'
    }, {
      className: 'bottom-bar'
    }]
  },
  nexus5: {
    type: 'nexus5',
    readableName: 'Nexus 5',
    colors: ['black'],
    style: [{
      className: 'top-bar'
    }, {
      className: 'sleep'
    }, {
      className: 'volume'
    }, {
      className: 'camera'
    }, {
      className: 'screen'
    }]
  }
};

var dropdownStyles = {"dropdown":"_3ZP5s","button":"_1HaoU"};

var Dropdown = function Dropdown(_ref) {
  var selectedItem = _ref.selectedItem,
      availableItems = _ref.availableItems,
      updateSelectedItem = _ref.updateSelectedItem;

  var _useState = React.useState(false),
      dropdown = _useState[0],
      setDropdown = _useState[1];

  return React__default.createElement("div", {
    className: dropdownStyles.dropdown,
    style: {
      width: '200px'
    },
    onFocus: function onFocus() {
      return setDropdown(false);
    }
  }, React__default.createElement("div", {
    className: dropdownStyles.button,
    onClick: function onClick() {
      return setDropdown(!dropdown);
    }
  }, selectedItem), dropdown ? React__default.createElement("ul", null, availableItems.map(function (item, index) {
    return React__default.createElement("li", {
      onClick: function onClick() {
        updateSelectedItem(item.type);
        setDropdown(!dropdown);
      },
      key: item.type + index
    }, item.readableName);
  })) : null);
};

var styles = {"button":"_3a1eO"};

var Button = function Button(_ref) {
  var landscape = _ref.landscape,
      updateLandscape = _ref.updateLandscape,
      label = _ref.label;
  return React__default.createElement("div", {
    className: styles.button
  }, React__default.createElement("button", {
    onClick: function onClick() {
      return updateLandscape(!landscape);
    }
  }, label));
};

var capitalizeString = function capitalizeString(stringToCapitalize) {
  var res = '';
  if (stringToCapitalize.length > 0) res += stringToCapitalize.charAt(0).toUpperCase();
  if (stringToCapitalize.length > 1) res += stringToCapitalize.slice(1);
  return res;
};

var Menu = function Menu(_ref) {
  var selectedDevice = _ref.selectedDevice,
      allowedDevices = _ref.allowedDevices,
      landscape = _ref.landscape,
      updateSelectedDevice = _ref.updateSelectedDevice,
      updateLandscape = _ref.updateLandscape,
      selectedColor = _ref.selectedColor;

  var _useState = React.useState(selectedColor),
      color = _useState[0],
      setColor = _useState[1];

  var _useState2 = React.useState(selectedDevice),
      device = _useState2[0],
      setDevice = _useState2[1];

  var _useState3 = React.useState(selectedDevice.colors),
      availableColors = _useState3[0],
      setAvailableColors = _useState3[1];

  var updateColor = function updateColor(color) {
    setColor(color);
    updateSelectedDevice(device, color);
  };

  var updateDevice = function updateDevice(deviceType) {
    var device = devices[deviceType];
    setDevice(device);
    setAvailableColors(device.colors);
    if (!device.colors.includes(color)) setColor('black');
    updateSelectedDevice(device, color);
  };

  var allDevices = ['iphone-x', 'note8', 'iphone8', 'iphone8plus', 'iphone5s', 'ipad', 'nexus5'];
  var readableDevices = (allowedDevices || allDevices).map(function (device) {
    var tempDevice = devices[device];
    return {
      type: tempDevice.type,
      readableName: tempDevice.readableName
    };
  });
  var readableColors = availableColors.map(function (color) {
    return {
      type: color,
      readableName: capitalizeString(color)
    };
  });
  return React__default.createElement("div", {
    style: {
      display: 'flex',
      justifyItems: 'center',
      alignItems: 'center'
    }
  }, React__default.createElement(Dropdown, {
    selectedItem: device.readableName,
    availableItems: readableDevices,
    updateSelectedItem: updateDevice
  }), availableColors && React__default.createElement(Dropdown, {
    selectedItem: capitalizeString(color),
    availableItems: readableColors,
    updateSelectedItem: updateColor
  }), React__default.createElement(Button, {
    landscape: landscape,
    updateLandscape: updateLandscape,
    label: 'Rotate'
  }));
};

var MobileDevicePreview = function MobileDevicePreview(_ref) {
  var allowedDevices = _ref.allowedDevices,
      preSelectedDevice = _ref.preSelectedDevice,
      _ref$preSelectedColor = _ref.preSelectedColor,
      preSelectedColor = _ref$preSelectedColor === void 0 ? 'black' : _ref$preSelectedColor,
      _ref$showMenu = _ref.showMenu,
      showMenu = _ref$showMenu === void 0 ? true : _ref$showMenu,
      _ref$preSelectedLands = _ref.preSelectedLandscape,
      preSelectedLandscape = _ref$preSelectedLands === void 0 ? false : _ref$preSelectedLands,
      children = _ref.children;

  var _useState = React.useState(),
      selectedDevice = _useState[0],
      setSelectedDevice = _useState[1];

  var _useState2 = React.useState('black'),
      selectedColor = _useState2[0],
      setSelectedColor = _useState2[1];

  var _useState3 = React.useState(preSelectedLandscape),
      landscape = _useState3[0],
      setLandscape = _useState3[1];

  React.useEffect(function () {
    setPreselectedDevice();
  }, []);

  var setPreselectedDevice = function setPreselectedDevice() {
    var device;

    if (preSelectedDevice && allowedDevices && allowedDevices.length > 0) {
      device = checkPreSelectedDeviceAndAllowedDevices(preSelectedDevice, allowedDevices);
    } else if (preSelectedDevice) {
      device = devices[preSelectedDevice];
    } else if (allowedDevices && allowedDevices.length > 0) {
      device = devices[allowedDevices[0]];
    } else {
      device = devices['iphone-x'];
    }

    setPreselectedColorForDevice(device);
    setSelectedDevice(device || devices['iphone-x']);
  };

  var checkPreSelectedDeviceAndAllowedDevices = function checkPreSelectedDeviceAndAllowedDevices(device, possibleDevices) {
    if (device && possibleDevices.includes(device)) {
      return devices[device];
    } else {
      console.error('The preselected device was not included in the allowedDevices. Defaulting to the first allowed device');
      return devices[possibleDevices[0]];
    }
  };

  var setPreselectedColorForDevice = function setPreselectedColorForDevice(device) {
    if (preSelectedColor && !device.colors.includes(preSelectedColor)) {
      console.error("Color " + preSelectedColor + " can't be chosen for device " + device.readableName);
      setSelectedColor('black');
    } else if (preSelectedColor && device.colors.includes(preSelectedColor)) {
      setSelectedColor(preSelectedColor);
    } else {
      setSelectedColor('black');
    }
  };

  var updateSelectedDevice = function updateSelectedDevice(updatedDevice, updatedColor) {
    setSelectedDevice(updatedDevice);
    setSelectedColor(updatedColor);
  };

  return selectedDevice ? React__default.createElement("div", {
    style: {
      display: 'flex',
      flexDirection: 'column',
      justifyContent: 'center',
      alignItems: 'center',
      minWidth: 'min-content'
    }
  }, showMenu && React__default.createElement(Menu, {
    selectedDevice: selectedDevice,
    selectedColor: selectedColor,
    allowedDevices: allowedDevices,
    landscape: landscape,
    updateLandscape: setLandscape,
    updateSelectedDevice: updateSelectedDevice
  }), React__default.createElement(BuildDevice, {
    selectedDevice: selectedDevice,
    selectedColor: selectedColor,
    landscape: landscape
  }, children)) : React__default.createElement("div", null, "Something strange happened");
};

module.exports = MobileDevicePreview;
//# sourceMappingURL=index.js.map
